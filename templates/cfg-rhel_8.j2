# RHEL 8 base image kickstart file

cmdline
zerombr
clearpart --all --initlabel --disklabel gpt

{% if boot_pw_encrypted == '' %}
bootloader --timeout 1 --append "{{ boot_parameters }}"
{% else %}
bootloader --timeout 1 --append "{{ boot_parameters }}" --iscrypted --password {{ boot_pw_encrypted }}
{% endif %}

{% if partitioning is defined and partitioning == 'auto' %}
autopart
{% elif partitioning is defined and partitioning == 'single' %}
{% if boot_bios_uefi|bool|int == 0 %}
reqpart
{% else %}
part biosboot  --fstype biosboot --size 1
part /boot/efi --fstype efi      --size 63
{% endif %}
part /         --fstype xfs      --size 1024 --grow
{% else %}
{% if boot_bios_uefi|bool|int == 0 %}
reqpart
{% else %}
part biosboot  --fstype biosboot --size 1
part /boot/efi --fstype efi      --size 63
{% endif %}
part /boot     --fstype xfs      --size 1024
part pv.01                       --size 1024 --grow
volgroup vg_rhel pv.01
logvol swap           --vgname vg_rhel --fstype swap --size 4096  --name lv_swap
logvol /              --vgname vg_rhel --fstype xfs  --size 6144  --name lv_root
logvol /home          --vgname vg_rhel --fstype xfs  --size 2048  --name lv_home
logvol /tmp           --vgname vg_rhel --fstype xfs  --size 2048  --name lv_tmp
logvol /var           --vgname vg_rhel --fstype xfs  --size 8192  --name lv_var
logvol /var/log       --vgname vg_rhel --fstype xfs  --size 2048  --name lv_var_log
logvol /var/log/audit --vgname vg_rhel --fstype xfs  --size 2048  --name lv_var_log_audit
logvol /var/tmp       --vgname vg_rhel --fstype xfs  --size 2048  --name lv_var_tmp
{% endif %}

selinux --enforcing
authselect --useshadow --passalgo sha512
rootpw --iscrypted {{ root_pw_encrypted }}

{% if ipv6_disable|bool|int == 0 %}
network --device net0 --bootproto dhcp --onboot yes --hostname {{ hostname }}
{% else %}
network --device net0 --bootproto dhcp --onboot yes --hostname {{ hostname }} --noipv6
{% endif %}

firewall --enabled --service ssh
firstboot --disabled
lang en_US.UTF-8
timezone --ntpservers {{ ntp_servers }} --utc {{ timezone }}
keyboard {{ keyboard }}
services --enabled tuned
reboot

{% if security_profile is defined %}
%addon org_fedora_oscap
content-type = scap-security-guide
profile = xccdf_org.ssgproject.content_profile_{{ security_profile }}
%end
{% endif %}

%packages

@Core
bash-completion
bzip2
#cloud-init
#cloud-utils-growpart
insights-client
man-pages
nano
policycoreutils-python-utils
prefixdevname
psmisc
python3
python3-libselinux
setools-console
#sos
tar
tuned
#unzip
yum-utils
{% if packer_builder == 'vmware' %}
open-vm-tools
{% endif %}

{% if boot_bios_uefi|bool|int == 1 %}
efibootmgr
-flashrom
grub2-efi-x64
grub2-pc
-mdadm
#parted
shim-x64
{% endif %}

{% if security_profile is defined %}
aide
openscap
openscap-scanner
scap-security-guide
{% endif %}
perl

-a*firmware*
-biosdevname
-dracut-config-rescue
-i*firmware*
-lib*firmware*
-NetworkManager-team
-NetworkManager-tui
-parted
-plymouth
-sqlite
-sssd*
%end

%post
sed -i -e 's,^AllowZoneDrifting=yes,AllowZoneDrifting=no,' /etc/firewalld/firewalld.conf
sed -i -e 's,^PermitRootLogin no,PermitRootLogin yes,' /etc/ssh/sshd_config
%end

{% if boot_bios_uefi|bool|int == 1 %}
%post
for grubcfg in /boot/grub2/grub.cfg /boot/efi/EFI/redhat/grub.cfg; do
  grub2-mkconfig -o $grubcfg
  sed -i -n '1,/BEGIN.*uefi.*/p;/END.*uefi.*/,$p' $grubcfg
done
if [ -d /sys/firmware/efi ]; then
  test -b /dev/vda && disk=/dev/vda || disk=/dev/sda
  rpm -q grub2-pc > /dev/null 2>&1 && grub2-install --target=i386-pc $disk || :
  #rpm -q parted > /dev/null 2>&1 && parted $disk disk_set pmbr_boot off || :
%end
{% endif %}

{% if ipv6_disable|bool|int == 1 %}
%post
sed -i -e '/^::1/d' /etc/hosts
sed -i -e 's,^OPTIONS=",OPTIONS="-4 ,g' -e 's, ",",' /etc/sysconfig/chronyd
sed -i -e 's,^IPv6_rpfilter=yes,IPv6_rpfilter=no,' /etc/firewalld/firewalld.conf
%end
{% endif %}

{% if root_ssh_key is defined %}
%post
mkdir /root/.ssh
echo "{{ root_ssh_key }}" > /root/.ssh/authorized_keys
chmod 755 /root/.ssh
chmod 600 /root/.ssh
%end
{% endif %}
